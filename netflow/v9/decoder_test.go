//: ----------------------------------------------------------------------------
//: Copyright (C) 2017 Verizon.  All Rights Reserved.
//: All Rights Reserved
//:
//: file:    decoder_test.go
//: details: netflow v9 decoder tests and benchmarks
//: author:  Mehrdad Arshad Rad
//: date:    05/05/2017
//:
//: Licensed under the Apache License, Version 2.0 (the "License");
//: you may not use this file except in compliance with the License.
//: You may obtain a copy of the License at
//:
//:     http://www.apache.org/licenses/LICENSE-2.0
//:
//: Unless required by applicable law or agreed to in writing, software
//: distributed under the License is distributed on an "AS IS" BASIS,
//: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//: See the License for the specific language governing permissions and
//: limitations under the License.
//: ----------------------------------------------------------------------------

package netflow9

import (
	"encoding/hex"
	"fmt"
	"net"
	"reflect"
	"strconv"
	"strings"
	"testing"
)

type Record struct {
	id          int
	byteCount   uint64
	packetCount uint64
	sourceIP    string
	sourcePort  uint16
	protocol    uint8
	destIP      string
	destPort    uint16
}

var (
	templateAndData                   []byte
	processedTemplateAndData          []Record
	multipleSetmultipleFlows          []byte
	processedmultipleSetmultipleFlows []Record
	n9kTemplate, n9kNetFlowMessage    []byte
	n9kRecords                        []Record
	templateRecordWithOptions         []byte
	dataRecordWithOptions             []byte
)

func init() {
	// templates 1024 and 2048, data for template 1024
	templateAndData = []byte{
		0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08,
		0x5a, 0x12, 0x2f, 0x29, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
		0x04, 0x00, 0x00, 0x0d, 0x00, 0x08, 0x00, 0x04,
		0x00, 0x0c, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04,
		0x00, 0x16, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
		0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04,
		0x00, 0x0e, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02,
		0x00, 0x0b, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01,
		0x00, 0x06, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x3c, 0x08, 0x00, 0x00, 0x0d,
		0x00, 0x1b, 0x00, 0x10, 0x00, 0x1c, 0x00, 0x10,
		0x00, 0x15, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04,
		0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
		0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04,
		0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02,
		0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01,
		0x00, 0x3c, 0x00, 0x01, 0x04, 0x00, 0x01, 0x3c,
		0x0a, 0x80, 0x8c, 0x72, 0x68, 0xf4, 0x2a, 0x42,
		0x0b, 0xfd, 0x44, 0x35, 0x0b, 0xfd, 0x43, 0x93,
		0x00, 0x00, 0x09, 0x1e, 0x00, 0x00, 0x00, 0x17,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xfd, 0x02, 0x01, 0xbb, 0x06, 0xdf, 0x04, 0x68,
		0xf4, 0x2a, 0x42, 0x0a, 0x80, 0x8c, 0x72, 0x0b,
		0xfd, 0x44, 0x35, 0x0b, 0xfd, 0x43, 0x93, 0x00,
		0x00, 0x1c, 0x24, 0x00, 0x00, 0x00, 0x12, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0xbb, 0xfd, 0x02, 0x06, 0x5b, 0x04, 0x0a, 0x80,
		0x8c, 0x72, 0x68, 0xf4, 0x2a, 0x42, 0x0b, 0xfd,
		0x68, 0xa1, 0x0b, 0xfd, 0x68, 0x1c, 0x00, 0x00,
		0x08, 0xb6, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x03,
		0x01, 0xbb, 0x06, 0x1f, 0x04, 0x68, 0xf4, 0x2a,
		0x42, 0x0a, 0x80, 0x8c, 0x72, 0x0b, 0xfd, 0x68,
		0xa1, 0x0b, 0xfd, 0x68, 0x1c, 0x00, 0x00, 0x14,
		0x8b, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbb, 0xfd,
		0x03, 0x06, 0x1b, 0x04, 0x0a, 0x80, 0x8c, 0x72,
		0x68, 0xf4, 0x2a, 0x42, 0x0b, 0xfd, 0x6b, 0x1b,
		0x0b, 0xfd, 0x6a, 0x97, 0x00, 0x00, 0x08, 0xea,
		0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xfd, 0x04, 0x01, 0xbb,
		0x06, 0xdf, 0x04, 0x68, 0xf4, 0x2a, 0x42, 0x0a,
		0x80, 0x8c, 0x72, 0x0b, 0xfd, 0x6b, 0x1b, 0x0b,
		0xfd, 0x6a, 0x97, 0x00, 0x00, 0x14, 0x2a, 0x00,
		0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0xbb, 0xfd, 0x04, 0x06,
		0x5b, 0x04, 0x0a, 0x80, 0x8c, 0x72, 0x68, 0xf4,
		0x2a, 0x42, 0x0b, 0xfd, 0x6f, 0x0b, 0x0b, 0xfd,
		0x6e, 0x87, 0x00, 0x00, 0x08, 0xf6, 0x00, 0x00,
		0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xfd, 0x06, 0x01, 0xbb, 0x06, 0x1f,
		0x04, 0x68, 0xf4, 0x2a, 0x42, 0x0a, 0x80, 0x8c,
		0x72, 0x0b, 0xfd, 0x6f, 0x0b, 0x0b, 0xfd, 0x6e,
		0x87, 0x00, 0x00, 0x14, 0x39, 0x00, 0x00, 0x00,
		0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0xbb, 0xfd, 0x06, 0x06, 0x1b, 0x04,
	}

	processedTemplateAndData = []Record{
		Record{id: 1, byteCount: 2334, packetCount: 23, sourceIP: "10.128.140.114", sourcePort: 64770, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 2, byteCount: 7204, packetCount: 18, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64770},
		Record{id: 3, byteCount: 2230, packetCount: 22, sourceIP: "10.128.140.114", sourcePort: 64771, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 4, byteCount: 5259, packetCount: 15, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64771},
		Record{id: 5, byteCount: 2282, packetCount: 22, sourceIP: "10.128.140.114", sourcePort: 64772, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 6, byteCount: 5162, packetCount: 15, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64772},
		Record{id: 7, byteCount: 2294, packetCount: 22, sourceIP: "10.128.140.114", sourcePort: 64774, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 8, byteCount: 5177, packetCount: 15, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64774},
	}

	// data for template 1024 and 2048
	multipleSetmultipleFlows = []byte{
		0x00, 0x09, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x08,
		0x5a, 0x12, 0x2f, 0x29, 0x00, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xf0,
		0x0a, 0x80, 0x8c, 0x72, 0x68, 0xf4, 0x2a, 0x42,
		0x0b, 0xfd, 0x6f, 0x0b, 0x0b, 0xfd, 0x6e, 0x87,
		0x00, 0x00, 0x08, 0xec, 0x00, 0x00, 0x00, 0x16,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xfd, 0x07, 0x01, 0xbb, 0x06, 0xdf, 0x04, 0x68,
		0xf4, 0x2a, 0x42, 0x0a, 0x80, 0x8c, 0x72, 0x0b,
		0xfd, 0x6f, 0x0b, 0x0b, 0xfd, 0x6e, 0x87, 0x00,
		0x00, 0x14, 0x3e, 0x00, 0x00, 0x00, 0x0f, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0xbb, 0xfd, 0x07, 0x06, 0x5b, 0x04, 0x0a, 0x80,
		0x8c, 0x72, 0x68, 0xf4, 0x2a, 0x42, 0x0b, 0xfd,
		0x92, 0x4c, 0x0b, 0xfd, 0x91, 0xb3, 0x00, 0x00,
		0x09, 0x1d, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x0a,
		0x01, 0xbb, 0x06, 0x1f, 0x04, 0x68, 0xf4, 0x2a,
		0x42, 0x0a, 0x80, 0x8c, 0x72, 0x0b, 0xfd, 0x92,
		0x4c, 0x0b, 0xfd, 0x91, 0xb3, 0x00, 0x00, 0x1b,
		0xc4, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbb, 0xfd,
		0x0a, 0x06, 0x1b, 0x04, 0x0a, 0x80, 0x8c, 0x72,
		0x68, 0xf4, 0x2a, 0x42, 0x0b, 0xfd, 0xb9, 0x3e,
		0x0b, 0xfd, 0xb8, 0xbf, 0x00, 0x00, 0x08, 0xe6,
		0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xfd, 0xc2, 0x01, 0xbb,
		0x06, 0xdf, 0x04, 0x68, 0xf4, 0x2a, 0x42, 0x0a,
		0x80, 0x8c, 0x72, 0x0b, 0xfd, 0xb9, 0x3e, 0x0b,
		0xfd, 0xb8, 0xbf, 0x00, 0x00, 0x14, 0x28, 0x00,
		0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0xbb, 0xfd, 0xc2, 0x06,
		0x5b, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x84,
		0x20, 0x01, 0x04, 0x20, 0x04, 0x0c, 0x13, 0x00,
		0x95, 0xdf, 0xbe, 0x98, 0x6f, 0xbb, 0x4f, 0x30,
		0x2a, 0x03, 0x28, 0x80, 0xf0, 0x22, 0x00, 0x0b,
		0xfa, 0xce, 0xb0, 0x0c, 0x00, 0x00, 0x00, 0x03,
		0x0b, 0xfd, 0xc1, 0x9c, 0x0b, 0xfd, 0x96, 0x68,
		0x00, 0x00, 0x04, 0x97, 0x00, 0x00, 0x00, 0x0c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xfd, 0x18, 0x01, 0xbb, 0x06, 0x1f, 0x06, 0x2a,
		0x03, 0x28, 0x80, 0xf0, 0x22, 0x00, 0x0b, 0xfa,
		0xce, 0xb0, 0x0c, 0x00, 0x00, 0x00, 0x03, 0x20,
		0x01, 0x04, 0x20, 0x04, 0x0c, 0x13, 0x00, 0x95,
		0xdf, 0xbe, 0x98, 0x6f, 0xbb, 0x4f, 0x30, 0x0b,
		0xfd, 0xc1, 0x9c, 0x0b, 0xfd, 0x96, 0x68, 0x00,
		0x00, 0x12, 0x18, 0x00, 0x00, 0x00, 0x0a, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0xbb, 0xfd, 0x18, 0x06, 0x1b, 0x06, 0x00, 0x00,
		0x04, 0x00, 0x00, 0x54, 0x0a, 0x80, 0x8c, 0x72,
		0x68, 0x5b, 0xb8, 0x61, 0x0b, 0xfd, 0xc1, 0x99,
		0x0b, 0xfd, 0x99, 0x58, 0x00, 0x00, 0x03, 0x53,
		0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xfd, 0x2b, 0x01, 0xbb,
		0x06, 0x1f, 0x04, 0x68, 0x5b, 0xb8, 0x61, 0x0a,
		0x80, 0x8c, 0x72, 0x0b, 0xfd, 0xc1, 0x99, 0x0b,
		0xfd, 0x99, 0x58, 0x00, 0x00, 0x0e, 0xeb, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0xbb, 0xfd, 0x2b, 0x06,
		0x1b, 0x04, 0x00, 0x00,
	}

	processedmultipleSetmultipleFlows = []Record{
		// set 1 : template 1024, 6 flows
		Record{id: 1, byteCount: 2284, packetCount: 22, sourceIP: "10.128.140.114", sourcePort: 64775, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 2, byteCount: 5182, packetCount: 15, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64775},
		Record{id: 3, byteCount: 2333, packetCount: 23, sourceIP: "10.128.140.114", sourcePort: 64778, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 4, byteCount: 7108, packetCount: 16, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64778},
		Record{id: 5, byteCount: 2278, packetCount: 22, sourceIP: "10.128.140.114", sourcePort: 64962, protocol: 6, destIP: "104.244.42.66", destPort: 443},
		Record{id: 6, byteCount: 5160, packetCount: 15, sourceIP: "104.244.42.66", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64962},
		// set 2: template 2048, 2 flows
		Record{id: 7, byteCount: 1175, packetCount: 12, sourceIP: "2001:420:40c:1300:95df:be98:6fbb:4f30", sourcePort: 64792, protocol: 6, destIP: "2a03:2880:f022:b:face:b00c::3", destPort: 443},
		Record{id: 8, byteCount: 4632, packetCount: 10, sourceIP: "2a03:2880:f022:b:face:b00c::3", sourcePort: 443, protocol: 6, destIP: "2001:420:40c:1300:95df:be98:6fbb:4f30", destPort: 64792},
		// set 4: template 1024, 2 flows
		Record{id: 9, byteCount: 851, packetCount: 10, sourceIP: "10.128.140.114", sourcePort: 64811, protocol: 6, destIP: "104.91.184.97", destPort: 443},
		Record{id: 10, byteCount: 3819, packetCount: 8, sourceIP: "104.91.184.97", sourcePort: 443, protocol: 6, destIP: "10.128.140.114", destPort: 64811},
	}

	// template 259
	n9kTemplate = []byte{
		0x00, 0x09, 0x00, 0x01, 0x0a, 0x8c, 0x12, 0x21,
		0x5a, 0x0f, 0x45, 0x92, 0x00, 0x00, 0x8e, 0x6d,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c,
		0x01, 0x03, 0x00, 0x09, 0x00, 0x08, 0x00, 0x04,
		0x00, 0x0c, 0x00, 0x04, 0x00, 0x04, 0x00, 0x01,
		0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02,
		0x00, 0x0a, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x01,
		0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
	}

	// data for template 259, 44 datasets
	n9kNetFlowMessage = []byte{
		0x00, 0x09, 0x00, 0x2c, 0x0a, 0x8c, 0x15, 0x44,
		0x5a, 0x0f, 0x45, 0x93, 0x00, 0x00, 0x8e, 0x6e,
		0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xcb, 0xf0, 0xba, 0xb1, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x6d, 0xc1, 0x34, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xca, 0xf1, 0xbb, 0xb0, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x24, 0xc1, 0x7d, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xf8, 0xc0, 0xa9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xb9, 0xc1, 0xe8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xa8, 0xc1, 0xf9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x34, 0xc1, 0x6d, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x7d, 0xc1, 0x24, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xca, 0xf0, 0xbb, 0xb1, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x74, 0xc1, 0x2d, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x6c, 0xc1, 0x35, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xcb, 0xf1, 0xba, 0xb0, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xb9, 0xc0, 0xe8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xe9, 0xc1, 0xb8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x25, 0xc1, 0x7c, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x35, 0xc1, 0x6c, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xb8, 0xc0, 0xe9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xe8, 0xc1, 0xb9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xa9, 0xc0, 0xf8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xf9, 0xc1, 0xa8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x7c, 0xc1, 0x25, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x3c, 0xc1, 0x65, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x75, 0xc1, 0x2c, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x65, 0xc1, 0x3c, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xb8, 0xc1, 0xe9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xf9, 0xc0, 0xa8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xca, 0xb0, 0xbb, 0xf1, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xa8, 0xc0, 0xf9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xcb, 0xb1, 0xba, 0xf0, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x2c, 0xc1, 0x75, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xe9, 0xc0, 0xb8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x3d, 0xc1, 0x64, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x64, 0xc1, 0x3d, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc5, 0x2d, 0xc1, 0x74, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc5, 0xe8, 0xc0, 0xb9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xcb, 0xb0, 0xba, 0xf1, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xf8, 0xc1, 0xa9, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc4, 0xa9, 0xc1, 0xf8, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x02, 0x0b, 0x1e, 0x01, 0x04, 0x0b,
		0x11, 0xca, 0xb1, 0xbb, 0xf0, 0x1a, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x04, 0x0b, 0x1e, 0x01, 0x02, 0x0b,
		0x11, 0xc5, 0x11, 0xc1, 0x90, 0x1a, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x01, 0x0b, 0x1e, 0x01, 0x03, 0x0b,
		0x11, 0xc6, 0x41, 0xc0, 0x60, 0x1a, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x04, 0x0b, 0x1e, 0x01, 0x02, 0x0b,
		0x11, 0xc5, 0x7a, 0xc1, 0x27, 0x1a, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00, 0x01, 0x03, 0x00, 0x20,
		0x1e, 0x01, 0x03, 0x0b, 0x1e, 0x01, 0x01, 0x0b,
		0x11, 0xc6, 0x98, 0xc0, 0x09, 0x1a, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x03, 0x84, 0x80, 0x00, 0x00,
		0x07, 0x09, 0x00, 0x00,
	}

	n9kRecords = []Record{
		Record{id: 1, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 52208, protocol: 17, destIP: "30.1.4.11", destPort: 47793},
		Record{id: 2, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50541, protocol: 17, destIP: "30.1.1.11", destPort: 49460},
		Record{id: 3, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 51953, protocol: 17, destIP: "30.1.4.11", destPort: 48048},
		Record{id: 4, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50468, protocol: 17, destIP: "30.1.1.11", destPort: 49533},
		Record{id: 5, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50680, protocol: 17, destIP: "30.1.3.11", destPort: 49321},
		Record{id: 6, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50361, protocol: 17, destIP: "30.1.3.11", destPort: 49640},
		Record{id: 7, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50344, protocol: 17, destIP: "30.1.3.11", destPort: 49657},
		Record{id: 8, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50484, protocol: 17, destIP: "30.1.1.11", destPort: 49517},
		Record{id: 9, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50557, protocol: 17, destIP: "30.1.1.11", destPort: 49444},
		Record{id: 10, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 51952, protocol: 17, destIP: "30.1.4.11", destPort: 48049},

		Record{id: 11, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50548, protocol: 17, destIP: "30.1.1.11", destPort: 49453},
		Record{id: 12, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50540, protocol: 17, destIP: "30.1.1.11", destPort: 49461},
		Record{id: 13, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 52209, protocol: 17, destIP: "30.1.4.11", destPort: 47792},
		Record{id: 14, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50617, protocol: 17, destIP: "30.1.3.11", destPort: 49384},
		Record{id: 15, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50409, protocol: 17, destIP: "30.1.3.11", destPort: 49592},
		Record{id: 16, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50469, protocol: 17, destIP: "30.1.1.11", destPort: 49532},
		Record{id: 17, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50485, protocol: 17, destIP: "30.1.1.11", destPort: 49516},
		Record{id: 18, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50616, protocol: 17, destIP: "30.1.3.11", destPort: 49385},
		Record{id: 19, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50408, protocol: 17, destIP: "30.1.3.11", destPort: 49593},
		Record{id: 20, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50601, protocol: 17, destIP: "30.1.3.11", destPort: 49400},

		Record{id: 21, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50425, protocol: 17, destIP: "30.1.3.11", destPort: 49576},
		Record{id: 22, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50556, protocol: 17, destIP: "30.1.1.11", destPort: 49445},
		Record{id: 23, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50492, protocol: 17, destIP: "30.1.1.11", destPort: 49509},
		Record{id: 24, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50549, protocol: 17, destIP: "30.1.1.11", destPort: 49452},
		Record{id: 25, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50533, protocol: 17, destIP: "30.1.1.11", destPort: 49468},
		Record{id: 26, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50360, protocol: 17, destIP: "30.1.3.11", destPort: 49641},
		Record{id: 27, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50681, protocol: 17, destIP: "30.1.3.11", destPort: 49320},
		Record{id: 28, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 51888, protocol: 17, destIP: "30.1.4.11", destPort: 48113},
		Record{id: 29, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50600, protocol: 17, destIP: "30.1.3.11", destPort: 49401},
		Record{id: 30, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 52145, protocol: 17, destIP: "30.1.4.11", destPort: 47856},

		Record{id: 31, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50476, protocol: 17, destIP: "30.1.1.11", destPort: 49525},
		Record{id: 32, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50665, protocol: 17, destIP: "30.1.3.11", destPort: 49336},
		Record{id: 33, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50493, protocol: 17, destIP: "30.1.1.11", destPort: 49508},
		Record{id: 34, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50532, protocol: 17, destIP: "30.1.1.11", destPort: 49469},
		Record{id: 35, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50477, protocol: 17, destIP: "30.1.1.11", destPort: 49524},
		Record{id: 36, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50664, protocol: 17, destIP: "30.1.3.11", destPort: 49337},
		Record{id: 37, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 52144, protocol: 17, destIP: "30.1.4.11", destPort: 47857},
		Record{id: 38, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50424, protocol: 17, destIP: "30.1.3.11", destPort: 49577},
		Record{id: 39, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50345, protocol: 17, destIP: "30.1.3.11", destPort: 49656},
		Record{id: 40, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.2.11", sourcePort: 51889, protocol: 17, destIP: "30.1.4.11", destPort: 48112},

		Record{id: 41, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.4.11", sourcePort: 50449, protocol: 17, destIP: "30.1.2.11", destPort: 49552},
		Record{id: 42, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.1.11", sourcePort: 50753, protocol: 17, destIP: "30.1.3.11", destPort: 49248},
		Record{id: 43, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.4.11", sourcePort: 50554, protocol: 17, destIP: "30.1.2.11", destPort: 49447},
		Record{id: 44, byteCount: 230528, packetCount: 1801, sourceIP: "30.1.3.11", sourcePort: 50840, protocol: 17, destIP: "30.1.1.11", destPort: 49161},
	}

	templateRecordWithOptions = []byte{
		0x00, 0x09, 0x00, 0x03, 0x14, 0xc8, 0xed, 0xa2,
		0x5c, 0x94, 0x78, 0x38, 0x00, 0x5c, 0x8c, 0x9c,
		0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x2c,
		0x02, 0x5e, 0x00, 0x09, 0x00, 0x01, 0x00, 0x04,
		0x00, 0x02, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
		0x00, 0x04, 0x00, 0x01, 0x00, 0x08, 0x00, 0x04,
		0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02,
		0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04,
		0x00, 0x01, 0x00, 0x34, 0x02, 0x63, 0x00, 0x08,
		0x00, 0x14, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05,
		0x00, 0x02, 0x00, 0x29, 0x00, 0x08, 0x00, 0x2a,
		0x00, 0x08, 0x00, 0x28, 0x00, 0x08, 0x00, 0x23,
		0x00, 0x01, 0x00, 0x22, 0x00, 0x04, 0x02, 0x64,
		0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
		0x00, 0x52, 0x00, 0x20,
	}

	dataRecordWithOptions = []byte{
		0x00, 0x09, 0x00, 0x02, 0x14, 0xc8, 0xed, 0xa2,
		0x5c, 0x94, 0x78, 0x38, 0x00, 0x5c, 0x8c, 0x9d,
		0x00, 0x00, 0x01, 0x01, 0x02, 0x63, 0x00, 0x28,
		0x01, 0x01, 0x02, 0x63, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x03, 0x9a, 0x34, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x20, 0xc9, 0x72, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x14, 0x14, 0x52, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x02, 0x64, 0x00, 0x70,
		0x02, 0x12, 0x0c, 0x00, 0x32, 0x2f, 0x31, 0x2f,
		0x78, 0x31, 0x32, 0x20, 0x61, 0x6c, 0x69, 0x61,
		0x73, 0x20, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
		0x2d, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x64,
		0x2d, 0x54, 0x72, 0x61, 0x02, 0x12, 0x0d, 0x00,
		0x32, 0x2f, 0x31, 0x2f, 0x78, 0x31, 0x33, 0x20,
		0x61, 0x6c, 0x69, 0x61, 0x73, 0x20, 0x48, 0x79,
		0x62, 0x72, 0x69, 0x64, 0x2d, 0x44, 0x65, 0x64,
		0x75, 0x70, 0x65, 0x64, 0x2d, 0x54, 0x72, 0x61,
		0x02, 0x12, 0x0e, 0x00, 0x32, 0x2f, 0x31, 0x2f,
		0x78, 0x31, 0x34, 0x20, 0x61, 0x6c, 0x69, 0x61,
		0x73, 0x20, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
		0x2d, 0x44, 0x65, 0x64, 0x75, 0x70, 0x65, 0x64,
		0x2d, 0x54, 0x72, 0x61,
	}
}

func TestDecodeNoData(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("cache.file")
	body := []byte{}
	d := NewDecoder(ip, body)
	if _, err := d.Decode(mCache); err == nil {
		t.Error("expected err but nothing")
	}
}

func getFlowRecord(flowID int, dataset []DecodedField) (Record, error) {
	var record Record
	var err error
	record.id = flowID
	for i := range dataset {
		value := dataset[i].Value
		switch dataset[i].ID {
		// ByteCount corresponding to the flow
		case 1:
			switch val := value.(type) {
			case []uint8:
				h := hex.EncodeToString(val)
				record.byteCount, err = strconv.ParseUint(h, 16, 64)
				if err != nil {
					return record, err
				}
			case uint64:
				record.byteCount = val
				err = nil
			default:
				return record, fmt.Errorf("ByteCount value is invalid")
			}
		// PacketCount corresponding to the flow
		case 2:
			switch val := value.(type) {
			case []uint8:
				h := hex.EncodeToString(val)
				record.packetCount, err = strconv.ParseUint(h, 16, 64)
				if err != nil {
					return record, err
				}
			case uint64:
				record.packetCount = val
				err = nil
			default:
				return record, fmt.Errorf("PacketCount value is invalid")
			}
		// Protocol
		case 4:
			if strings.Compare(reflect.TypeOf(value).Name(), "uint8") != 0 {
				return record, fmt.Errorf("Protocol value is invalid")
			}
			record.protocol = value.(uint8)
		// Source Port
		case 7:
			if strings.Compare(reflect.TypeOf(value).Name(), "uint16") != 0 {
				return record, fmt.Errorf("Source Port value is invalid")
			}
			record.sourcePort = value.(uint16)
		// Destination Port
		case 11:
			if strings.Compare(reflect.TypeOf(value).Name(), "uint16") != 0 {
				return record, fmt.Errorf("Destination Port value is invalid")
			}
			record.destPort = value.(uint16)
		// Source IPv4 Address
		case 8:
			if strings.Compare(reflect.TypeOf(value).Name(), "IP") != 0 {
				return record, fmt.Errorf("Source IPv4 Address value is invalid")
			}
			record.sourceIP = (value.(net.IP)).String()
		// Destination IPv4 Address
		case 12:
			if strings.Compare(reflect.TypeOf(value).Name(), "IP") != 0 {
				return record, fmt.Errorf("Destination IPv4 Address value is invalid")
			}
			record.destIP = (value.(net.IP)).String()
		// Source IPv6 Address
		case 27:
			if strings.Compare(reflect.TypeOf(value).Name(), "IP") != 0 {
				return record, fmt.Errorf("Source IPv6 Address value is invalid")
			}
			record.sourceIP = (value.(net.IP)).String()
		// Destination IPv6 Address
		case 28:
			if strings.Compare(reflect.TypeOf(value).Name(), "IP") != 0 {
				return record, fmt.Errorf("Destination IPv6 Address value is invalid")
			}
			record.destIP = (value.(net.IP)).String()
		}
	}
	return record, nil
}

func validateParsedRecord(flowID int, parsedRecord, expectedRecord Record) error {
	if parsedRecord.byteCount != expectedRecord.byteCount {
		return fmt.Errorf("error reading flowSet#%d, expected byte count %v, found %v", flowID+1, expectedRecord.byteCount, parsedRecord.byteCount)
	}
	if parsedRecord.packetCount != expectedRecord.packetCount {
		return fmt.Errorf("error reading flowSet#%d, expected packet count %v, found %v", flowID+1, expectedRecord.packetCount, parsedRecord.packetCount)
	}
	if parsedRecord.protocol != expectedRecord.protocol {
		return fmt.Errorf("error reading flowSet#%d, expected protocol %v, found %v", flowID+1, expectedRecord.protocol, parsedRecord.protocol)
	}
	if parsedRecord.sourcePort != parsedRecord.sourcePort {
		return fmt.Errorf("error reading flowSet#%d, expected source port %v, found %v", flowID+1, expectedRecord.sourcePort, parsedRecord.sourcePort)
	}
	if parsedRecord.destPort != parsedRecord.destPort {
		return fmt.Errorf("error reading flowSet#%d, expected dest port %v, found %v", flowID+1, expectedRecord.destPort, parsedRecord.destPort)
	}
	parsedIP := net.ParseIP(parsedRecord.sourceIP)
	expectedIP := net.ParseIP(expectedRecord.sourceIP)
	if !parsedIP.Equal(expectedIP) {
		return fmt.Errorf("error reading flowSet#%d, expected source ip %v, found %v", flowID+1, expectedRecord.sourceIP, parsedRecord.sourceIP)
	}
	parsedIP = net.ParseIP(parsedRecord.destIP)
	expectedIP = net.ParseIP(expectedRecord.destIP)
	if !parsedIP.Equal(expectedIP) {
		return fmt.Errorf("error reading flowSet#%d, expected dest ip %v, found %v", flowID+1, expectedRecord.destIP, parsedRecord.destIP)
	}
	return nil
}

// TestTemplateAndDataMessage multiple sets: 3 sets, set 1: template record 1024, set 2: template record 2048 and set 3: data for 1024, 8 flows
func TestTemplateAndDataMessage(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("v9cache.file")
	// Load template
	d := NewDecoder(ip, templateAndData)
	r, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding data:", err)
	}
	if l := len(r.DataSets); l != 8 {
		t.Error("Expected 8 datasets, but received", l)
	}
	expectedSets := []int{1024, 2048}
	actualSets := mCache.allSetIds()
	if !reflect.DeepEqual(expectedSets, actualSets) {
		t.Error("Expected template sets:", expectedSets, ", but received:", actualSets)
	}
	for i := 0; i < len(processedTemplateAndData); i = i + 1 {
		record, err := getFlowRecord(i, r.DataSets[i])
		if err != nil {
			t.Errorf(err.Error())
		}
		if err = validateParsedRecord(i, record, processedTemplateAndData[i]); err != nil {
			t.Errorf(err.Error())
		}
	}
}

// TestMultipleSetsMultipleFlows: multiple sets: 3 sets, set 1: 6 flows, set 2: 2 flows, set 3: 2 flows
func TestMultipleSetsMultipleFlows(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("v9cache.file")
	tpl := NewDecoder(ip, templateAndData)
	_, err := tpl.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding template:", err)
	}
	d := NewDecoder(ip, multipleSetmultipleFlows)
	r, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding data:", err)
	}
	if l := len(r.DataSets); l != 10 {
		t.Error("Expected 10 datasets, but received", l)
	}
	expectedSets := []int{1024, 2048}
	actualSets := mCache.allSetIds()
	if !reflect.DeepEqual(expectedSets, actualSets) {
		t.Error("Expected template sets:", expectedSets, ", but received:", actualSets)
	}
	for i := 0; i < len(processedmultipleSetmultipleFlows); i = i + 1 {
		record, err := getFlowRecord(i, r.DataSets[i])
		if err != nil {
			t.Errorf(err.Error())
		}
		if err = validateParsedRecord(i, record, processedmultipleSetmultipleFlows[i]); err != nil {
			t.Errorf(err.Error())
		}
	}
}

// TestNexusNetFlowData multiple sets: 44 flowsets, 1 flow each
func TestNexusNetFlowData(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("v9cache.file")
	// Load template
	tpl := NewDecoder(ip, n9kTemplate)
	_, err := tpl.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding template:", err)
	}
	d := NewDecoder(ip, n9kNetFlowMessage)
	r, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding data:", err)
	}
	if l := len(r.DataSets); l != 44 {
		t.Error("Expected 44 datasets, but received", l)
	}
	expectedSets := []int{259}
	actualSets := mCache.allSetIds()
	if !reflect.DeepEqual(expectedSets, actualSets) {
		t.Error("Expected template sets:", expectedSets, ", but received:", actualSets)
	}
	for i := 0; i < len(n9kRecords); i = i + 1 {
		record, err := getFlowRecord(i, r.DataSets[i])
		if err != nil {
			t.Errorf(err.Error())
		}
		if err = validateParsedRecord(i, record, n9kRecords[i]); err != nil {
			t.Errorf(err.Error())
		}
	}
}

// TestOptionsDataRecord test template and data records with options. no. of scope fields in one options record > 1
func TestOptionsDataRecord(t *testing.T) {
	ip := net.ParseIP("127.0.0.1")
	mCache := GetCache("v9cache.file")
	// Load template
	tpl := NewDecoder(ip, templateRecordWithOptions)
	_, err := tpl.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding template:", err)
	}
	d := NewDecoder(ip, dataRecordWithOptions)
	r, err := d.Decode(mCache)
	if err != nil {
		t.Error("unexpected error happened while decoding data:", err)
	}
	expectedSets := []int{606, 611, 612}
	actualSets := mCache.allSetIds()
	if !reflect.DeepEqual(expectedSets, actualSets) {
		t.Error("Expected template sets:", expectedSets, ", but received:", actualSets)
	}
	if l := len(r.DataSets); l != 4 {
		t.Errorf("Expected 4 datasets, found %d", len(r.DataSets))
	}
}
